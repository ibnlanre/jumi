import type { AtRule, StandardPropertiesHyphen, SvgPropertiesHyphen } from 'csstype'
import type { PluginCreator } from 'tailwindcss/plugin'

import type { effectKeyframes } from '@/keyframes/effects'

export type AddProperty = Collection<CssInJs>

export type AnchorFunction
  = | 'anchor'
    | 'anchor-size'

export type AnimatableStandardPropertyType
  = | 'accent-color'
    | 'align-content'
    | 'align-items'
    | 'align-self'
    | 'alignment-baseline'
    | 'all'
    | 'anchor-name'
    | 'appearance'
    | 'aspect-ratio'
    | 'backdrop-filter'
    | 'backface-visibility'
    | 'background'
    | 'background-attachment'
    | 'background-blend-mode'
    | 'background-clip'
    | 'background-color'
    | 'background-image'
    | 'background-origin'
    | 'background-position'
    | 'background-position-x'
    | 'background-position-y'
    | 'background-repeat'
    | 'background-size'
    | 'block-size'
    | 'border'
    | 'border-block'
    | 'border-block-color'
    | 'border-block-end'
    | 'border-block-end-color'
    | 'border-block-end-style'
    | 'border-block-end-width'
    | 'border-block-start'
    | 'border-block-start-color'
    | 'border-block-start-style'
    | 'border-block-start-width'
    | 'border-block-style'
    | 'border-block-width'
    | 'border-bottom'
    | 'border-bottom-color'
    | 'border-bottom-left-radius'
    | 'border-bottom-right-radius'
    | 'border-bottom-style'
    | 'border-bottom-width'
    | 'border-collapse'
    | 'border-color'
    | 'border-end-end-radius'
    | 'border-end-start-radius'
    | 'border-image'
    | 'border-image-outset'
    | 'border-image-repeat'
    | 'border-image-slice'
    | 'border-image-source'
    | 'border-image-width'
    | 'border-inline'
    | 'border-inline-color'
    | 'border-inline-end'
    | 'border-inline-end-color'
    | 'border-inline-end-style'
    | 'border-inline-end-width'
    | 'border-inline-start'
    | 'border-inline-start-color'
    | 'border-inline-start-style'
    | 'border-inline-start-width'
    | 'border-inline-style'
    | 'border-inline-width'
    | 'border-left'
    | 'border-left-color'
    | 'border-left-style'
    | 'border-left-width'
    | 'border-radius'
    | 'border-right'
    | 'border-right-color'
    | 'border-right-style'
    | 'border-right-width'
    | 'border-spacing'
    | 'border-start-end-radius'
    | 'border-start-start-radius'
    | 'border-style'
    | 'border-top'
    | 'border-top-color'
    | 'border-top-left-radius'
    | 'border-top-right-radius'
    | 'border-top-style'
    | 'border-top-width'
    | 'border-width'
    | 'bottom'
    | 'box-decoration-break'
    | 'box-shadow'
    | 'box-sizing'
    | 'break-after'
    | 'break-before'
    | 'break-inside'
    | 'caption-side'
    | 'caret-color'
    | 'clear'
    | 'clip-path'
    | 'clip-rule'
    | 'color'
    | 'color-interpolation'
    | 'color-interpolation-filters'
    | 'color-scheme'
    | 'column-count'
    | 'column-fill'
    | 'column-gap'
    | 'column-rule'
    | 'column-rule-color'
    | 'column-rule-style'
    | 'column-rule-width'
    | 'column-span'
    | 'column-width'
    | 'columns'
    | 'contain'
    | 'contain-intrinsic-block-size'
    | 'contain-intrinsic-height'
    | 'contain-intrinsic-inline-size'
    | 'contain-intrinsic-size'
    | 'contain-intrinsic-width'
    | 'container-type'
    | 'content'
    | 'content-visibility'
    | 'counter-increment'
    | 'counter-reset'
    | 'counter-set'
    | 'cursor'
    | 'cx'
    | 'cy'
    | 'd'
    | 'display'
    | 'dominant-baseline'
    | 'empty-cells'
    | 'fill'
    | 'fill-opacity'
    | 'fill-rule'
    | 'filter'
    | 'flex'
    | 'flex-basis'
    | 'flex-direction'
    | 'flex-flow'
    | 'flex-grow'
    | 'flex-shrink'
    | 'flex-wrap'
    | 'float'
    | 'flood-color'
    | 'flood-opacity'
    | 'font'
    | 'font-family'
    | 'font-feature-settings'
    | 'font-kerning'
    | 'font-language-override'
    | 'font-optical-sizing'
    | 'font-palette'
    | 'font-size'
    | 'font-size-adjust'
    | 'font-style'
    | 'font-synthesis'
    | 'font-synthesis-small-caps'
    | 'font-synthesis-style'
    | 'font-synthesis-weight'
    | 'font-variant'
    | 'font-variant-alternates'
    | 'font-variant-caps'
    | 'font-variant-east-asian'
    | 'font-variant-emoji'
    | 'font-variant-ligatures'
    | 'font-variant-numeric'
    | 'font-variant-position'
    | 'font-variation-settings'
    | 'font-weight'
    | 'forced-color-adjust'
    | 'gap'
    | 'grid'
    | 'grid-area'
    | 'grid-auto-columns'
    | 'grid-auto-flow'
    | 'grid-auto-rows'
    | 'grid-column'
    | 'grid-column-end'
    | 'grid-column-start'
    | 'grid-row'
    | 'grid-row-end'
    | 'grid-row-start'
    | 'grid-template'
    | 'grid-template-areas'
    | 'grid-template-columns'
    | 'grid-template-rows'
    | 'hanging-punctuation'
    | 'height'
    | 'hyphenate-character'
    | 'hyphenate-limit-chars'
    | 'hyphens'
    | 'image-orientation'
    | 'image-rendering'
    | 'initial-letter'
    | 'inline-size'
    | 'inset'
    | 'inset-block'
    | 'inset-block-end'
    | 'inset-block-start'
    | 'inset-inline'
    | 'inset-inline-end'
    | 'inset-inline-start'
    | 'justify-content'
    | 'justify-items'
    | 'justify-self'
    | 'left'
    | 'letter-spacing'
    | 'lighting-color'
    | 'line-break'
    | 'line-clamp'
    | 'line-height'
    | 'list-style'
    | 'list-style-image'
    | 'list-style-position'
    | 'list-style-type'
    | 'margin'
    | 'margin-block'
    | 'margin-block-end'
    | 'margin-block-start'
    | 'margin-bottom'
    | 'margin-inline'
    | 'margin-inline-end'
    | 'margin-inline-start'
    | 'margin-left'
    | 'margin-right'
    | 'margin-top'
    | 'marker'
    | 'marker-end'
    | 'marker-mid'
    | 'marker-start'
    | 'mask'
    | 'mask-border'
    | 'mask-border-mode'
    | 'mask-border-outset'
    | 'mask-border-repeat'
    | 'mask-border-slice'
    | 'mask-border-source'
    | 'mask-border-width'
    | 'mask-clip'
    | 'mask-composite'
    | 'mask-image'
    | 'mask-mode'
    | 'mask-origin'
    | 'mask-position'
    | 'mask-repeat'
    | 'mask-size'
    | 'mask-type'
    | 'math-depth'
    | 'math-style'
    | 'max-block-size'
    | 'max-height'
    | 'max-inline-size'
    | 'max-width'
    | 'min-block-size'
    | 'min-height'
    | 'min-inline-size'
    | 'min-width'
    | 'mix-blend-mode'
    | 'object-fit'
    | 'object-position'
    | 'offset'
    | 'offset-anchor'
    | 'offset-distance'
    | 'offset-path'
    | 'offset-position'
    | 'offset-rotate'
    | 'opacity'
    | 'order'
    | 'orphans'
    | 'outline'
    | 'outline-color'
    | 'outline-offset'
    | 'outline-style'
    | 'outline-width'
    | 'overflow'
    | 'overflow-anchor'
    | 'overflow-block'
    | 'overflow-clip-margin'
    | 'overflow-inline'
    | 'overflow-wrap'
    | 'overflow-x'
    | 'overflow-y'
    | 'overscroll-behavior'
    | 'overscroll-behavior-block'
    | 'overscroll-behavior-inline'
    | 'overscroll-behavior-x'
    | 'overscroll-behavior-y'
    | 'padding'
    | 'padding-block'
    | 'padding-block-end'
    | 'padding-block-start'
    | 'padding-bottom'
    | 'padding-inline'
    | 'padding-inline-end'
    | 'padding-inline-start'
    | 'padding-left'
    | 'padding-right'
    | 'padding-top'
    | 'page'
    | 'paint-order'
    | 'perspective'
    | 'perspective-origin'
    | 'place-content'
    | 'place-items'
    | 'place-self'
    | 'pointer-events'
    | 'position'
    | 'position-anchor'
    | 'position-area'
    | 'position-try'
    | 'position-try-fallbacks'
    | 'position-try-order'
    | 'print-color-adjust'
    | 'quotes'
    | 'r'
    | 'resize'
    | 'right'
    | 'rotate'
    | 'row-gap'
    | 'ruby-align'
    | 'ruby-overhang'
    | 'ruby-position'
    | 'rx'
    | 'ry'
    | 'scale'
    | 'scroll-margin'
    | 'scroll-margin-block'
    | 'scroll-margin-block-end'
    | 'scroll-margin-block-start'
    | 'scroll-margin-bottom'
    | 'scroll-margin-inline'
    | 'scroll-margin-inline-end'
    | 'scroll-margin-inline-start'
    | 'scroll-margin-left'
    | 'scroll-margin-right'
    | 'scroll-margin-top'
    | 'scroll-padding'
    | 'scroll-padding-block'
    | 'scroll-padding-block-end'
    | 'scroll-padding-block-start'
    | 'scroll-padding-bottom'
    | 'scroll-padding-inline'
    | 'scroll-padding-inline-end'
    | 'scroll-padding-inline-start'
    | 'scroll-padding-left'
    | 'scroll-padding-right'
    | 'scroll-padding-top'
    | 'scroll-snap-align'
    | 'scroll-snap-stop'
    | 'scroll-snap-type'
    | 'scrollbar-color'
    | 'scrollbar-gutter'
    | 'scrollbar-width'
    | 'shape-image-threshold'
    | 'shape-margin'
    | 'shape-outside'
    | 'shape-rendering'
    | 'stop-color'
    | 'stop-opacity'
    | 'stroke'
    | 'stroke-dasharray'
    | 'stroke-dashoffset'
    | 'stroke-linecap'
    | 'stroke-linejoin'
    | 'stroke-miterlimit'
    | 'stroke-opacity'
    | 'stroke-width'
    | 'tab-size'
    | 'table-layout'
    | 'text-align'
    | 'text-align-last'
    | 'text-anchor'
    | 'text-autospace'
    | 'text-box'
    | 'text-box-edge'
    | 'text-box-trim'
    | 'text-combine-upright'
    | 'text-decoration'
    | 'text-decoration-color'
    | 'text-decoration-line'
    | 'text-decoration-skip-ink'
    | 'text-decoration-style'
    | 'text-decoration-thickness'
    | 'text-emphasis'
    | 'text-emphasis-color'
    | 'text-emphasis-position'
    | 'text-emphasis-style'
    | 'text-indent'
    | 'text-justify'
    | 'text-orientation'
    | 'text-overflow'
    | 'text-rendering'
    | 'text-shadow'
    | 'text-transform'
    | 'text-underline-offset'
    | 'text-underline-position'
    | 'text-wrap'
    | 'text-wrap-mode'
    | 'text-wrap-style'
    | 'top'
    | 'transform'
    | 'transform-box'
    | 'transform-origin'
    | 'transform-style'
    | 'translate'
    | 'user-select'
    | 'vector-effect'
    | 'vertical-align'
    | 'view-timeline-inset'
    | 'view-transition-class'
    | 'view-transition-name'
    | 'visibility'
    | 'white-space'
    | 'white-space-collapse'
    | 'widows'
    | 'width'
    | 'will-change'
    | 'word-break'
    | 'word-spacing'
    | 'writing-mode'
    | 'x'
    | 'y'
    | 'z-index'

export type AnimationFrame = 'from' | 'to' | `${number}%` | (string & {})

export type AnimationFunction
  = | 'scroll'
    | 'view'

export type AnimationPropertyRegister = `@property --jumi-${StandardAnimationPropertyType}`

export type AnimationPropertyRegisterCollection = Partial<Record<AnimationPropertyRegister, AtRule.PropertyHyphen<string>>>

export type AnimationPropertyType = NonStandardAnimtionPropertyType | StandardAnimationPropertyType

export type AnimationPropertyVariable = `--jumi-${AnimationPropertyType}`

export type AnimationVariableCollection = Record<AnimationPropertyVariable, string>

export type Api = Parameters<PluginCreator> extends [infer U] ? U : never

export type Collection<Values = any, Key extends PropertyKey = string> = Record<Key, Values>

export type ColorFunction
  = | 'color'
    | 'color-mix'
    | 'contrast-color'
    | 'device-cmyk'
    | 'hsl'
    | 'hwb'
    | 'lab'
    | 'lch'
    | 'light-dark'
    | 'oklab'
    | 'oklch'
    | 'rgb'

export type ComparisonFunction
  = | 'clamp'
    | 'max'
    | 'min'

export type ComponentKey
  = | 'animation-delay-backward'
    | 'animation-delay-forward'

export type CounterFunction
  = | 'counter'
    | 'counters'
    | 'symbols'

export type CSSFunction
  = | AnchorFunction
    | AnimationFunction
    | ColorFunction
    | ComparisonFunction
    | CounterFunction
    | ExponentialFunction
    | FilterFunction
    | FontFunction
    | GradientFunction
    | ImageFunction
    | MatrixFunction
    | ReferenceFunction
    | RotationFunction
    | ScalingFunction
    | ShapeFunction
    | SkewFunction
    | SteppedValueFunction
    | TranslationFunction
    | TreeCountingFunction
    | TrigonometricFunction

export interface CssInJs extends Partial<KeyframeVariables>, Partial<PropertyVariableCollection> {
  [key: string]: Collection | string | string[]
}

export type CSSRuleObject = CssInJs | CssInJs[]

export type CSSValue = (string & {}) | Variable

export type DataType
  = | 'absolute-size'
    | 'angle'
    | 'any'
    | 'bg-size'
    | 'color'
    | 'family-name'
    | 'generic-name'
    | 'image'
    | 'integer'
    | 'length'
    | 'line-width'
    | 'number'
    | 'percentage'
    | 'position'
    | 'ratio'
    | 'relative-size'
    | 'shadow'
    | 'url'
    | 'vector'

export type DeprecatedNonStandardPropertyType
  = | 'box-align'
    | 'box-direction'
    | 'box-flex'
    | 'box-flex-group'
    | 'box-lines'
    | 'box-ordinal-group'
    | 'box-orient'
    | 'box-pack'
    | 'user-modify'

export type DeprecatedPropertyType = DeprecatedNonStandardPropertyType | DeprecatedStandardPropertyType

export type DeprecatedStandardPropertyType
  = | 'clip'
    | 'font-stretch'
    | 'page-break-after'
    | 'page-break-before'
    | 'page-break-inside'

export type Effect = keyof typeof effectKeyframes

export type EffectKeyframes<Key extends string> = `@keyframes jumi-${Key}`

export type EffectKeyframesCollection<Effect extends string = string> = {
  [Key in Effect]: Record<EffectKeyframes<Key>, Keyframes>
}

export type ExperimentatalPropertyType
  = | 'caret'
    | 'caret-animation'
    | 'caret-shape'
    | 'corner-block-end-shape'
    | 'corner-block-start-shape'
    | 'corner-bottom-left-shape'
    | 'corner-bottom-right-shape'
    | 'corner-bottom-shape'
    | 'corner-end-end-shape'
    | 'corner-end-start-shape'
    | 'corner-inline-end-shape'
    | 'corner-inline-start-shape'
    | 'corner-left-shape'
    | 'corner-right-shape'
    | 'corner-shape'
    | 'corner-start-end-shape'
    | 'corner-start-start-shape'
    | 'corner-top-left-shape'
    | 'corner-top-right-shape'
    | 'corner-top-shape'
    | 'field-sizing'
    | 'font-synthesis-position'
    | 'image-resolution'
    | 'interpolate-size'
    | 'line-height-step'
    | 'margin-trim'
    | 'math-shift'
    | 'overlay'
    | 'position-visibility'
    | 'reading-flow'
    | 'reading-order'
    | 'scroll-marker-group'
    | 'scroll-target-group'
    | 'speak-as'
    | 'text-decoration-skip'
    | 'text-size-adjust'
    | 'text-spacing-trim'

export type ExponentialFunction
  = | 'abs'
    | 'exp'
    | 'hypot'
    | 'log'
    | 'pow'
    | 'sign'
    | 'sqrt'

export type FilterFunction
  = | 'blur'
    | 'brightness'
    | 'contrast'
    | 'drop-shadow'
    | 'grayscale'
    | 'hue-rotate'
    | 'invert'
    | 'opacity'
    | 'saturate'
    | 'sepia'

export type FontFunction
  = | 'annotation'
    | 'character-variant'
    | 'ornaments'
    | 'styleset'
    | 'stylistic'
    | 'swash'

export type GetMatchComponents = (api: Api) => Collection<MatchComponentsPropertyValue>

export type GetMatchUtilities = (api: Api) => Collection<MatchUtilitiesPropertyValue>

export type GradientFunction
  = | 'conic-gradient'
    | 'linear-gradient'
    | 'radial-gradient'
    | 'repeating-conic-gradient'
    | 'repeating-linear-gradient'
    | 'repeating-radial-gradient'

export type ImageFunction
  = | 'cross-fade'
    | 'element'
    | 'image'
    | 'image-set'
    | 'paint'

export type KeyframeDefinition = Collection<Collection<number | string>>

export type Keyframes = Partial<Record<AnimationFrame, PropertiesType>>

export type KeyframesVariableReference = `var(${StandardPropertyKeyframesVariable}, none)`

export type KeyframeVariables = Record<StandardPropertyKeyframesVariable, string>

export type MatchComponents = Record<ComponentKey, MatchComponentsPropertyValue>

export type MatchComponentsPropertyFunction = (value: string, extra: { modifier: null | string }) => CssInJs

export interface MatchComponentsPropertyValue extends Partial<MatchUtilitiesOptions> {
  property: MatchComponentsPropertyFunction
}

export type MatchProperty = Record<MatchUtilitiesPropertyKey, MatchUtilitiesPropertyValue>

export interface MatchUtilitiesOptions {
  modifiers: Collection<string>
  supportsNegativeValues: boolean
  type: Array<DataType> | DataType
  values: Collection
}

export type MatchUtilitiesPropertyFunction = (value: string, extra: { modifier: null | string }) => CSSRuleObject

export type MatchUtilitiesPropertyKey = 'animate' | 'effect' | `animate-${AnimatableStandardPropertyType}` | `animate-${NonStandardPropertyType}` | AnimationPropertyType

export interface MatchUtilitiesPropertyValue extends Partial<MatchUtilitiesOptions> {
  property: MatchUtilitiesPropertyFunction
}

export interface MatchVariant {
  generator: (value: string, extra: { modifier: null | string }) => string | string[]
  name: string
  values: Collection<string>
}

export type MatrixFunction
  = | 'calc'
    | 'calc-size'
    | 'matrix3d'
    | 'matrix'
    | 'perspective'

export type NonAnimatableStandardPropertyType
  = | 'anchor-name'
    | 'container'
    | 'container-name'
    | 'direction'
    | 'isolation'
    | 'scroll-behavior'
    | 'scroll-timeline'
    | 'scroll-timeline-axis'
    | 'scroll-timeline-name'
    | 'timeline-scope'
    | 'touch-action'
    | 'transition'
    | 'transition-behavior'
    | 'transition-delay'
    | 'transition-duration'
    | 'transition-property'
    | 'transition-timing-function'
    | 'unicode-bidi'
    | 'view-timeline'
    | 'view-timeline-axis'
    | 'view-timeline-name'
    | 'zoom'
    | StandardAnimationPropertyType

export type NonStandardAnimtionPropertyType
  = | 'animation-range-end-offset'
    | 'animation-range-end-timeline'
    | 'animation-range-start-offset'
    | 'animation-range-start-timeline'
    | 'animation-timeline-axis'
    | 'animation-timeline-inset'
    | 'animation-timeline-inset-end'
    | 'animation-timeline-inset-start'
    | 'animation-timeline-scroll'
    | 'animation-timeline-scroller'
    | 'animation-timeline-view'

export type NonStandardPropertyType
  = | 'aspect-ratio-height'
    | 'aspect-ratio-width'
    | 'backdrop-filter-blur'
    | 'backdrop-filter-brightness'
    | 'backdrop-filter-contrast'
    | 'backdrop-filter-drop-shadow'
    | 'backdrop-filter-drop-shadow-blur'
    | 'backdrop-filter-drop-shadow-color'
    | 'backdrop-filter-drop-shadow-offset-x'
    | 'backdrop-filter-drop-shadow-offset-y'
    | 'backdrop-filter-grayscale'
    | 'backdrop-filter-hue-rotate'
    | 'backdrop-filter-invert'
    | 'backdrop-filter-opacity'
    | 'backdrop-filter-saturate'
    | 'backdrop-filter-sepia'
    | 'backdrop-filter-url'
    | 'background-position-x-edge'
    | 'background-position-x-offset'
    | 'background-position-y-edge'
    | 'background-position-y-offset'
    | 'background-repeat-x'
    | 'background-repeat-y'
    | 'background-size-height'
    | 'background-size-width'
    | 'border-block-end-radius'
    | 'border-block-radius'
    | 'border-block-start-radius'
    | 'border-bottom-radius'
    | 'border-image-outset-bottom'
    | 'border-image-outset-left'
    | 'border-image-outset-right'
    | 'border-image-outset-top'
    | 'border-image-outset-x'
    | 'border-image-outset-y'
    | 'border-image-repeat-x'
    | 'border-image-repeat-y'
    | 'border-inline-end-radius'
    | 'border-inline-radius'
    | 'border-inline-start-radius'
    | 'border-left-radius'
    | 'border-right-radius'
    | 'border-top-radius'
    | 'box-shadow-blur'
    | 'box-shadow-color'
    | 'box-shadow-inset'
    | 'box-shadow-offset-x'
    | 'box-shadow-offset-y'
    | 'box-shadow-outset'
    | 'box-shadow-spread'
    | 'display-inside'
    | 'display-outside'
    | 'filter-blur'
    | 'filter-brightness'
    | 'filter-contrast'
    | 'filter-drop-shadow'
    | 'filter-drop-shadow-blur'
    | 'filter-drop-shadow-color'
    | 'filter-drop-shadow-offset-x'
    | 'filter-drop-shadow-offset-y'
    | 'filter-grayscale'
    | 'filter-hue-rotate'
    | 'filter-invert'
    | 'filter-opacity'
    | 'filter-saturate'
    | 'filter-sepia'
    | 'filter-url'
    | 'font-smooth'
    | 'hyphenate-limit-minimum-characters-after'
    | 'hyphenate-limit-minimum-characters-before'
    | 'hyphenate-limit-minimum-word-length'
    | 'mask-border-outset-bottom'
    | 'mask-border-outset-left'
    | 'mask-border-outset-right'
    | 'mask-border-outset-top'
    | 'mask-border-outset-x'
    | 'mask-border-outset-y'
    | 'mask-border-repeat-x'
    | 'mask-border-repeat-y'
    | 'mask-border-slice-bottom'
    | 'mask-border-slice-left'
    | 'mask-border-slice-right'
    | 'mask-border-slice-top'
    | 'mask-border-slice-x'
    | 'mask-border-slice-y'
    | 'mask-position-x'
    | 'mask-position-y'
    | 'math-depth-add'
    | 'matrix'
    | 'matrix-3d'
    | 'matrix-a1'
    | 'matrix-a2'
    | 'matrix-a3'
    | 'matrix-a4'
    | 'matrix-a'
    | 'matrix-b1'
    | 'matrix-b2'
    | 'matrix-b3'
    | 'matrix-b4'
    | 'matrix-b'
    | 'matrix-c1'
    | 'matrix-c2'
    | 'matrix-c3'
    | 'matrix-c4'
    | 'matrix-c'
    | 'matrix-d1'
    | 'matrix-d2'
    | 'matrix-d3'
    | 'matrix-d4'
    | 'matrix-d'
    | 'matrix-tx'
    | 'matrix-ty'
    | 'object-position-x'
    | 'object-position-x-edge'
    | 'object-position-x-offset'
    | 'object-position-y'
    | 'object-position-y-edge'
    | 'object-position-y-offset'
    | 'offset-anchor-x'
    | 'offset-anchor-x-edge'
    | 'offset-anchor-x-offset'
    | 'offset-anchor-y'
    | 'offset-anchor-y-edge'
    | 'offset-anchor-y-offset'
    | 'offset-position-x'
    | 'offset-position-x-edge'
    | 'offset-position-x-offset'
    | 'offset-position-y'
    | 'offset-position-y-edge'
    | 'offset-position-y-offset'
    | 'position-area-x'
    | 'position-area-y'
    | 'rotate-3d'
    | 'rotate-angle'
    | 'rotate-x'
    | 'rotate-y'
    | 'rotate-z'
    | 'scale-3d'
    | 'scale-x'
    | 'scale-y'
    | 'scale-z'
    | 'skew'
    | 'skew-x'
    | 'skew-y'
    | 'text-shadow-blur'
    | 'text-shadow-color'
    | 'text-shadow-offset-x'
    | 'text-shadow-offset-y'
    | 'transform-origin-x'
    | 'transform-origin-y'
    | 'transform-origin-z'
    | 'translate-3d'
    | 'translate-x'
    | 'translate-y'
    | 'translate-z'

export interface PropertiesType<TLength = 0 | (string & {}), TTime = string & {}>
  extends StandardPropertiesType<TLength, TTime>, SvgPropertiesType<TLength, TTime> {
  [key: string]: unknown
}

export type PropertyType
  = | NonStandardAnimtionPropertyType
    | NonStandardPropertyType
    | StandardPropertyType

export type PropertyVariable = `--jumi-${PropertyType}`

export type PropertyVariableCollection = Record<PropertyVariable, string>

export type PropertyVariables = Record<string, PropertyVariableCollection>

export type ReferenceFunction
  = | 'attr'
    | 'env'
    | 'if'
    | 'url'
    | 'var'

export type Register = (attribute: string, options: { keyframes: CssInJs, variables?: CssInJs }) => void

export type RotationFunction
  = | 'rotate3d'
    | 'rotate'
    | 'rotateX'
    | 'rotateY'
    | 'rotateZ'

export type ScalingFunction
  = | 'scale3d'
    | 'scale'
    | 'scaleX'
    | 'scaleY'
    | 'scaleZ'

export type ShapeFunction
  = | 'circle'
    | 'ellipse'
    | 'inset'
    | 'path'
    | 'polygon'
    | 'ray'
    | 'rect'
    | 'shape'
    | 'superellipse'
    | 'xywh'

export type SkewFunction
  = | 'skew'
    | 'skewX'
    | 'skewY'

export type StandardAnimationPropertyType
  = | 'animation'
    | 'animation-composition'
    | 'animation-delay'
    | 'animation-direction'
    | 'animation-duration'
    | 'animation-fill-mode'
    | 'animation-iteration-count'
    | 'animation-name'
    | 'animation-play-state'
    | 'animation-range'
    | 'animation-range-end'
    | 'animation-range-start'
    | 'animation-timeline'
    | 'animation-timing-function'

export interface StandardPropertiesType<TLength = 0 | (string & {}), TTime = string & {}>
  extends StandardPropertiesHyphen<TLength, TTime> {
  'text-autospace'?: string
  'text-box-edge'?: string
  'text-box-trim'?: string
  'text-wrap-mode'?: string
  'text-wrap-style'?: string
  'textbox'?: string
  'view-transition-class'?: string
}

export type StandardPropertyKeyframes<Key extends string> = `@keyframes jumi-${Key}`

export type StandardPropertyKeyframesCollection = {
  [Key in AnimatableStandardPropertyType]: Record<StandardPropertyKeyframes<Key>, Keyframes>
}

export type StandardPropertyKeyframesVariable = `--jumi-${AnimatableStandardPropertyType}-keyframes`

export type StandardPropertyType
  = | AnimatableStandardPropertyType
    | NonAnimatableStandardPropertyType

export type SteppedValueFunction
  = | 'mod'
    | 'rem'
    | 'round'

export interface SvgPropertiesType<TLength = 0 | (string & {}), TTime = string & {}>
  extends SvgPropertiesHyphen<TLength, TTime> {
  'color-interpolation-filters'?: string
  'cx'?: string
  'cy'?: string
  'd'?: string
  'x'?: string
  'y'?: string
}

export type TailwindTheme
  = | 'accentColor'
    | 'animation'
    | 'aspectRatio'
    | 'backdropBlur'
    | 'backdropBrightness'
    | 'backdropContrast'
    | 'backdropGrayscale'
    | 'backdropHueRotate'
    | 'backdropInvert'
    | 'backdropOpacity'
    | 'backdropSaturate'
    | 'backdropSepia'
    | 'backgroundColor'
    | 'backgroundImage'
    | 'backgroundOpacity'
    | 'backgroundPosition'
    | 'backgroundSize'
    | 'blur'
    | 'borderColor'
    | 'borderOpacity'
    | 'borderRadius'
    | 'borderSpacing'
    | 'borderWidth'
    | 'boxShadow'
    | 'boxShadowColor'
    | 'brightness'
    | 'caretColor'
    | 'colors'
    | 'column-count'
    | 'column-fill'
    | 'column-gap'
    | 'column-rule'
    | 'column-rule-color'
    | 'column-rule-style'
    | 'column-rule-width'
    | 'column-span'
    | 'column-width'
    | 'columns'
    | 'container'
    | 'content'
    | 'contrast'
    | 'cursor'
    | 'data'
    | 'divideColor'
    | 'divideOpacity'
    | 'divideWidth'
    | 'dropShadow'
    | 'fill'
    | 'flex'
    | 'flexBasis'
    | 'flexGrow'
    | 'flexShrink'
    | 'fontFamily'
    | 'fontSize'
    | 'fontWeight'
    | 'gap'
    | 'gradientColorStops'
    | 'grayscale'
    | 'gridAutoColumns'
    | 'gridAutoRows'
    | 'gridColumn'
    | 'gridColumnEnd'
    | 'gridColumnStart'
    | 'gridRow'
    | 'gridRowEnd'
    | 'gridRowStart'
    | 'gridTemplateColumns'
    | 'gridTemplateRows'
    | 'height'
    | 'hueRotate'
    | 'inset'
    | 'invert'
    | 'keyframes'
    | 'letterSpacing'
    | 'lineHeight'
    | 'listStyleType'
    | 'margin'
    | 'maxHeight'
    | 'maxWidth'
    | 'minHeight'
    | 'minWidth'
    | 'objectPosition'
    | 'opacity'
    | 'order'
    | 'outlineColor'
    | 'outlineOffset'
    | 'outlineWidth'
    | 'padding'
    | 'placeholderColor'
    | 'placeholderOpacity'
    | 'ringColor'
    | 'ringOffsetColor'
    | 'ringOffsetWidth'
    | 'ringOpacity'
    | 'ringWidth'
    | 'rotate'
    | 'saturate'
    | 'scale'
    | 'screens'
    | 'scrollMargin'
    | 'scrollPadding'
    | 'sepia'
    | 'skew'
    | 'spacing'
    | 'stroke'
    | 'strokeWidth'
    | 'supports'
    | 'textColor'
    | 'textDecorationColor'
    | 'textDecorationThickness'
    | 'textIndent'
    | 'textOpacity'
    | 'textUnderlineOffset'
    | 'transformOrigin'
    | 'transitionDelay'
    | 'transitionDuration'
    | 'transitionProperty'
    | 'transitionTimingFunction'
    | 'translate'
    | 'whiteSpace'
    | 'width'
    | 'willChange'
    | 'x'
    | 'y'
    | 'zIndex'

export type TranslationFunction
  = | 'translate3d'
    | 'translate'
    | 'translateX'
    | 'translateY'
    | 'translateZ'

export type TreeCountingFunction
  = | 'sibling-count'
    | 'sibling-index'

export type TrigonometricFunction
  = | 'acos'
    | 'asin'
    | 'atan2'
    | 'atan'
    | 'cos'
    | 'sin'
    | 'tan'

export type Variable = PropertyVariable | StandardPropertyKeyframesVariable

export interface VariablesCollection extends AnimationVariableCollection, KeyframeVariables, PropertyVariableCollection {
  [key: string]: string
}
